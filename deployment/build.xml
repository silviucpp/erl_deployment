<?xml version="1.0" encoding="utf-8"?>
<project name="Create deb package for Erlang release app">

    <!--
            https://stackoverflow.com/questions/69832933/apache-ant-with-graal-vm
            https://mvnrepository.com/artifact/org.openjdk.nashorn/nashorn-core
    -->
    <path id ="javax.classpath">
        <pathelement location="${project.deployment_scripts}/nashorn-core-15.4.jar" />
        <pathelement location="${project.deployment_scripts}/asm-7.3.1.jar" />
        <pathelement location="${project.deployment_scripts}/asm-tree-7.3.1.jar" />
        <pathelement location="${project.deployment_scripts}/asm-util-7.3.1.jar" />
        <pathelement location="${project.deployment_scripts}/asm-commons-7.3.1.jar" />
    </path>

    <!-- Load ant contrib -->

    <taskdef resource="net/sf/antcontrib/antcontrib.properties">
        <classpath>
            <pathelement location="${project.deployment_scripts}/ant-contrib.jar"/>
        </classpath>
    </taskdef>

    <!-- Load antlib to allow nested property names:
         https://svn.apache.org/repos/asf/ant/antlibs/props/trunk/docs/index.html -->

    <taskdef resource="org/apache/ant/props/antlib.xml">
        <classpath>
            <pathelement location="${project.deployment_scripts}/ant-props-1.0Alpha.jar"/>
        </classpath>
    </taskdef>

    <propertyhelper>
        <nested/>
    </propertyhelper>

    <!-- Detect project.root in case is not defined -->

    <if>
        <isset property="project.root"/>
        <else>
            <loadresource property="project.root">
                <propertyresource name="basedir"/>
            </loadresource>

            <echo message="App detected project root: ${project.root}"/>
        </else>
    </if>

    <!-- Load env variables -->

    <property environment="env_var"/>

    <!-- Load default properties -->

    <property file="${project.deployment_scripts}/defaults.properties"/>

    <!-- Import the other files -->

    <import file="bootstrap.xml" as="nested"/>
    <import file="fpm.xml" as="nested"/>

    <target name="show_env">
        <echoproperties prefix="env_var."/>
    </target>

    <!-- Public targets -->

    <target name="help">
        <echo>show_env (List all environment variables)</echo>
        <echo>clean</echo>
        <echo>genconf  -Denv=${project.environments}</echo>
        <echo>make_deb -Denv=${project.environments} -Dbuild.clean=true(default)|false</echo>
    </target>

    <target name="genconf" depends="check_env">
        <antcallback target="bootstrap:gen_config" />
        <var file="${conf.temp_path}/app.properties"/>

        <!-- Copy system.config and vm.args in the proper profile -->

        <switch value="${profile}">
            <case value="release">
                <echo message="Use RELEASE profile ..."/>
                <var name="vm_args_path" value="${conf.app.profile.release}/vm.args" />

                <copy file="${conf.temp_path}/app.config" tofile="${conf.app.profile.release}/sys.config" overwrite="true"/>
                <copy file="${conf.temp_path}/vm.args" tofile="${vm_args_path}" overwrite="true"/>

                <!-- deprecated -->

                <replace file="${vm_args_path}" token="${ERLANG_COOKIE}" value="${erlang.cookie}"/>
                <replace file="${vm_args_path}" token="${APP_NAME}" value="${release.node_name}"/>
            </case>

            <case value="test">
                <echo message="Use TEST profile ..."/>
                <var name="vm_args_path" value="${conf.app.profile.test}/vm.args" />

                <copy file="${conf.temp_path}/app.config" tofile="${conf.app.profile.test}/sys.config" overwrite="true"/>
                <copy file="${conf.temp_path}/vm.args" tofile="${vm_args_path}" overwrite="true"/>

                <!-- deprecated -->

                <replace file="${vm_args_path}" token="${ERLANG_COOKIE}" value="${erlang.cookie}"/>
                <replace file="${vm_args_path}" token="${APP_NAME}" value="${release.node_name}"/>
            </case>

            <default>
                <echo message="Use DEVELOPMENT profile ..."/>
                <var name="vm_args_path" value="${conf.app.profile.default}/vm.args" />

                <copy file="${conf.temp_path}/app.config" tofile="${conf.app.profile.default}/sys.config" overwrite="true"/>
                <copy file="${conf.temp_path}/vm.args" tofile="${vm_args_path}" overwrite="true"/>

                <antcallback target="bootstrap::node_ip" return="node_ip" />
                <replace file="${vm_args_path}" token="${NODE_IP}" value="${node_ip}"/>

                <!-- deprecated -->

                <replace file="${vm_args_path}" token="${ERLANG_COOKIE}" value="${erlang.cookie}"/>
                <replace file="${vm_args_path}" token="${APP_NAME}" value="${release.node_name}"/>
            </default>
        </switch>

        <antcallback target="bootstrap:file_expand_variables">
            <param name="file" value="${vm_args_path}"/>
        </antcallback>

    </target>

    <target name="make_deb" depends="check_env,bootstrap:scripts">

        <if>
            <isset property="env_var.BUILD_NUMBER"/>
            <then>
                <overwrite-property property="package.version" value="${package.version}.${env_var.BUILD_NUMBER}"/>
            </then>
        </if>

        <echo message="Package version: ${package.version}"/>

        <!--
            An environment can have multiple DC configs. In case this is the case then for each data-center a config is generated
            and included into the deb. Once deb is installed based on some condition the proper config will be enabled.
            By default the config selection is implemented based on hostname.
        -->

        <if>
            <isset property="env.${env}.dc.list"/>
            <then>
                <echo message="Generate DEB with multiple DC support: ${env.${env}.dc.list}"/>

                <antcallback target="genconf" return="erlang.cookie">
                    <param name="profile" value="release"/>
                    <param name="env.dc" value="${env.${env}.dc.default}"/>
                </antcallback>

                <antcall target="build_erlang" />

                <antcallback target="get_release_version" return="app_release_version" />
                <property name="sys_config_path" value="${project.release.location}/${project.release.appdir}/releases/${app_release_version}"/>

                <move file="${sys_config_path}/sys.config" tofile="${sys_config_path}/sys-${env.${env}.dc.default}.config" overwrite="true"/>

                <for list="${env.${env}.dc.list}" param="currentdc">
                    <sequential>
                        <switch value="@{currentdc}">
                            <case value="${env.${env}.dc.default}">
                            </case>

                            <default>
                                <echo message="Generate config for: @{currentdc} ..."/>

                                <antcallback target="genconf" return="erlang.cookie">
                                    <param name="profile" value="release"/>
                                    <param name="env.dc" value="@{currentdc}"/>
                                </antcallback>

                                <move file="${conf.app.profile.release}/sys.config" tofile="${sys_config_path}/sys-@{currentdc}.config" overwrite="true"/>
                            </default>
                        </switch>
                    </sequential>
                </for>
            </then>
            <else>
                <antcallback target="genconf" return="erlang.cookie">
                    <param name="profile" value="release"/>
                </antcallback>

                <antcall target="build_erlang" />
            </else>
        </if>

        <antcallback target="prepare_files" return="tempdir_path, dst_postinst, dst_postupgrade, dst_prerm, dst_systemd" />

        <switch value="${deb.post_build_target}">
            <case value="">
                <echo message="No postbuild target."/>
            </case>

            <default>
                <echo message="Use postbuild target: ${deb.post_build_target}."/>
                <antcall target="${deb.post_build_target}" />
            </default>
        </switch>

        <antcall target="fpm::run" />

        <delete includeEmptyDirs="true">
            <fileset dir="${tempdir_path}"/>
        </delete>

    </target>

    <!-- Internal targets -->

    <target name="check_env">
        <condition property="valid_env">
            <and>
                <isset property="env"/>
                <matches pattern="${env}" string="${project.environments}"/>
            </and>
        </condition>
        <fail message="Not a valid environment. use one of: ${project.environments}" unless="valid_env"/>
    </target>

    <target name="post_erlang_release" >
        <!--
        	temporary workaround for:
            https://github.com/erlware/relx/pull/649#issuecomment-436048940
            https://github.com/erlang/rebar3/issues/1970
        -->

        <replace
            file="${location}"
            token="-kernel net_ticktime $TICKTIME $VM_ARGS"
            value="-kernel net_ticktime $TICKTIME"/>

        <!-- Check if we need to disable Erlang heart (which is default in rebar3 releases) -->

        <if>
            <not>
                <isset property="release.${env}.use_erlang_heart"/>
            </not>
            <then>
                <var name="use_erlang_heart" value="${release.use_erlang_heart}"/>
            </then>
            <else>
                <var name="use_erlang_heart" value="${release.${env}.use_erlang_heart}"/>
            </else>
        </if>

        <echo message="Use Erlang HEART: ${use_erlang_heart}"/>

        <if>
            <equals arg1="${use_erlang_heart}" arg2="false" />
            <then>
                <replace file="${location}" token="HEART_COMMAND=" value="#HEART_COMMAND="/>
                <replace file="${location}" token="export HEART_COMMAND" value="#export HEART_COMMAND"/>
            </then>
        </if>
    </target>

    <target name="clean" >

        <delete dir="${project.build.default.location}" followsymlinks="false" removenotfollowedsymlinks="true" />
        <delete dir="${project.build.release.location}" followsymlinks="false" removenotfollowedsymlinks="true" />

    </target>

    <target name="build_erlang" >

        <if>
            <not>
                <equals arg1="${build.clean}" arg2="false" />
            </not>
            <then>
                <antcall target="clean" />
            </then>
        </if>

        <exec executable="rebar3" failonerror="true" dir="${project.root}">
            <arg line="as release release" />
        </exec>

        <var name="release_path" value="${project.release.location}/${project.release.appdir}/bin/${project.release.appdir}"/>

        <antcall target="post_erlang_release">
            <param name="location" value="${release_path}"/>
        </antcall>

        <chmod file="${release_path}" perm="+x"/>

    </target>

    <target name="create_temp_dir">

        <exec executable="mktemp" outputproperty="tempdir_path" failonerror="true">
            <arg line="-d /tmp/${package.name}_deb_XXXXXXXX" />
        </exec>

        <echo message="Temp path = ${tempdir_path}"/>

    </target>

    <target name="get_release_version">
        <exec executable="find" outputproperty="vm_args_path" failonerror="true" dir="${project.release.location}">
            <arg line = ". -name vm.args"/>
        </exec>

        <propertyregex property="app_release_version"
                       input="${vm_args_path}"
                       regexp="(.*)/releases/(.*)/vm.args"
                       select="\2"
                       casesensitive="false" />

        <echo message="Release version = ${app_release_version}"/>
    </target>

    <target name="prepare_files" depends="create_temp_dir,get_release_version">

        <property name="tempdir_path" value="${tempdir_path}"/>

        <property name="dst_postinst" value="${tempdir_path}/postinst.sh"/>
        <property name="dst_postupgrade" value="${tempdir_path}/postupgrade.sh"/>
        <property name="dst_prerm" value="${tempdir_path}/prerm.sh"/>
        <property name="dst_systemd" value="${tempdir_path}/${package.name}.service"/>

        <copy file="${deb.post_install}" tofile="${dst_postinst}"/>
        <copy file="${deb.post_upgrade}" tofile="${dst_postupgrade}"/>
        <copy file="${deb.pre_remove}" tofile="${dst_prerm}"/>
        <copy file="${deb.systemd}" tofile="${dst_systemd}"/>

        <if>
            <equals arg1="${deb.reload_modified_beams}" arg2="true" />
            <then>
                <echo message="## Enable modules hot-swapping on update" />
                <replace file="${dst_postinst}" token="${reload_command}" value=""/>
                <replace file="${dst_postupgrade}" token="${reload_command}" value="${misc.reload_command}"/>
            </then>
            <else>
                <replace file="${dst_postinst}" token="${reload_command}" value=""/>
                <replace file="${dst_postupgrade}" token="${reload_command}" value=""/>
            </else>
        </if>

        <replace file="${dst_postinst}" token="${get_ip_command}" value="${misc.ip.linux}"/>
        <replace file="${dst_postinst}" token="${config_file}" value="${package.home}/releases/${app_release_version}/vm.args"/>
        <replace file="${dst_postinst}" token="${app_name}" value="${package.name}"/>
        <replace file="${dst_postinst}" token="${app_home}" value="${package.home}"/>
        <replace file="${dst_postinst}" token="${cookie}" value="${erlang.cookie}"/>

        <replace file="${dst_postupgrade}" token="${get_ip_command}" value="${misc.ip.linux}"/>
        <replace file="${dst_postupgrade}" token="${config_file}" value="${package.home}/releases/${app_release_version}/vm.args"/>
        <replace file="${dst_postupgrade}" token="${app_name}" value="${package.name}"/>
        <replace file="${dst_postupgrade}" token="${app_home}" value="${package.home}"/>
        <replace file="${dst_postupgrade}" token="${cookie}" value="${erlang.cookie}"/>

        <replace file="${dst_systemd}" token="${description}" value="${package.description}"/>
        <replace file="${dst_systemd}" token="${app_root}" value="${package.home}"/>
        <replace file="${dst_systemd}" token="${app_name}" value="${package.app}"/>
        <replace file="${dst_systemd}" token="${limit_no_file}" value="${package.limit_no_file}"/>
        <replace file="${dst_systemd}" token="${other_systemd_commands}" value="${package.other_systemd_commands}"/>

        <!-- in case of multi dc we need to make the post-install script to rename the proper config as sys.config -->

        <if>
            <isset property="env.${env}.dc.list"/>
            <then>
                <var name="hostname_routing" value="DOMAIN=`dnsdomainname`&#10;" />
                <var name="config_file_location" value="${package.home}/releases/${app_release_version}" />

                <for list="${env.${env}.dc.list}" param="currentdc">
                    <sequential>
                        <var name="dc_hostname" value="${env.${env}.@{currentdc}.hostname}" />
                        <var name="hostname_routing" value="${hostname_routing}&#10;if [ &quot;$DOMAIN&quot; = &quot;${dc_hostname}&quot; ]; then mv ${config_file_location}/sys-@{currentdc}.config ${config_file_location}/sys.config ; fi" />
                    </sequential>
                </for>

                <replace file="${dst_postinst}" token="${multi_dc_config_replace}" value="${hostname_routing}"/>
                <replace file="${dst_postupgrade}" token="${multi_dc_config_replace}" value="${hostname_routing}"/>
            </then>
            <else>
                <replace file="${dst_postinst}" token="${multi_dc_config_replace}" value=""/>
                <replace file="${dst_postupgrade}" token="${multi_dc_config_replace}" value=""/>
            </else>
        </if>

    </target>

</project>
